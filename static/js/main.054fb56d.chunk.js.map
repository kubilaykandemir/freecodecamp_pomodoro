{"version":3,"sources":["components/Session.js","components/Break.js","components/Timer.js","App.js","index.js"],"names":["Session","props","sessionLength","onSessionLengthChange","id","value","onClick","e","Break","breakLength","onBreakLengthChange","Timer","resetApp","useState","countdown","isSession","setCounterState","intervalId","setIntervalId","isStarted","setIsStarted","momentDurationFormatSetup","moment","audio","document","getElementById","useEffect","prevState","formattedCountdown","duration","format","trim","setInterval","newTimeLeft","play","clearInterval","pause","currentTime","preload","src","App","setSessionLength","setBreakLength","className","target","getAttribute","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.054fb56d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Session = (props) => {\n  const sessionLength = props.sessionLength / 60;\n  const onSessionLengthChange = props.onSessionLengthChange;\n\n  return (\n    <div>\n      <h2 id=\"session-label\">Session Length</h2>\n      <button\n        id=\"session-increment\"\n        value={\"increase\"}\n        onClick={(e) => onSessionLengthChange(e)}\n      >\n        Increase\n      </button>\n      <div id=\"session-length\">{sessionLength}</div>\n      <button\n        id=\"session-decrement\"\n        value={\"decrease\"}\n        onClick={(e) => onSessionLengthChange(e)}\n      >\n        Decrease\n      </button>\n    </div>\n  );\n};\n\nexport default Session;\n","import React from \"react\";\n\nconst Break = (props) => {\n  const breakLength = props.breakLength / 60;\n  const onBreakLengthChange = props.onBreakLengthChange;\n\n  return (\n    <div>\n      <h2 id=\"break-label\">Break Length</h2>\n      <button\n        id=\"break-increment\"\n        value={\"increase\"}\n        onClick={(e) => onBreakLengthChange(e)}\n      >\n        Increase\n      </button>\n      <div id=\"break-length\">{breakLength}</div>\n      <button\n        id=\"break-decrement\"\n        value={\"decrease\"}\n        onClick={(e) => onBreakLengthChange(e)}\n      >\n        Decrease\n      </button>\n    </div>\n  );\n};\n\nexport default Break;\n","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport momentDurationFormatSetup from \"moment-duration-format\";\n\nconst Timer = (props) => {\n  const sessionLength = props.sessionLength;\n  const breakLength = props.breakLength;\n  const resetApp = props.resetApp;\n  // const [countdown, setCountdown] = useState(sessionLength);\n  const [{ countdown, isSession }, setCounterState] = useState({\n    countdown: sessionLength,\n    isSession: true,\n  });\n  const [intervalId, setIntervalId] = useState(null);\n  const [isStarted, setIsStarted] = useState(false);\n  // const [isSession, setIsSession] = useState(true);\n\n  momentDurationFormatSetup(moment);\n\n  const audio = document.getElementById(\"beep\");\n\n  useEffect(() => {\n    if (isSession) {\n      return setCounterState((prevState) => {\n        return {\n          ...prevState,\n          countdown: sessionLength,\n        };\n      });\n    }\n\n    if (!isSession) {\n      return setCounterState((prevState) => {\n        return {\n          ...prevState,\n          countdown: breakLength,\n        };\n      });\n    }\n  }, [sessionLength, breakLength, isSession]);\n\n  const handleStartStop = () => {\n    if (!isStarted) {\n      let id = setInterval(\n        () =>\n          setCounterState((prevState) => {\n            const newTimeLeft = prevState.countdown - 1;\n            if (newTimeLeft >= 0) {\n              return {\n                ...prevState,\n                countdown: newTimeLeft,\n              };\n            }\n            if (newTimeLeft < 0) {\n              audio.play();\n              if (prevState.isSession === true)\n                return {\n                  isSession: !prevState.isSession,\n                  countdown: breakLength,\n                };\n              if (prevState.isSession === false) {\n                return {\n                  isSession: !prevState.isSession,\n                  countdown: sessionLength,\n                };\n              }\n            }\n          }),\n        1000\n      );\n      setIntervalId(id);\n      setIsStarted(true);\n    }\n    if (isStarted) {\n      clearInterval(intervalId);\n      setIsStarted(false);\n    }\n  };\n  const onReset = () => {\n    clearInterval(intervalId);\n    audio.pause();\n    audio.currentTime = 0;\n    resetApp();\n    setCounterState({\n      isSession: true,\n      countdown: sessionLength,\n    });\n    setIsStarted(false);\n  };\n\n  const formattedCountdown = moment\n    .duration(countdown, \"second\")\n    .format(\"mm:ss\", { trim: false });\n\n  return (\n    <div>\n      <h2 id=\"timer-label\">{isSession ? \"Session\" : \"Break\"}</h2>\n      <div id=\"time-left\">{formattedCountdown}</div>\n      <button id=\"start_stop\" onClick={handleStartStop}>\n        {isStarted ? \"Stop\" : \"Start\"}\n      </button>\n      <button id=\"reset\" onClick={onReset}>\n        Reset\n      </button>\n      <audio\n        id=\"beep\"\n        preload={true}\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n      ></audio>\n    </div>\n  );\n};\n\nexport default Timer;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Session from \"./components/Session.js\";\nimport Break from \"./components/Break.js\";\nimport Timer from \"./components/Timer.js\";\n\nfunction App() {\n  const [sessionLength, setSessionLength] = useState(1500);\n  const [breakLength, setBreakLength] = useState(300);\n\n  const onSessionLengthChange = (e) => {\n    const value = e.target.getAttribute(\"value\");\n    if (value === \"increase\") {\n      if (sessionLength < 3600) {\n        setSessionLength((prevState) => prevState + 60);\n      }\n      if (sessionLength >= 3600) {\n        setSessionLength(3600);\n      }\n    }\n    if (value === \"decrease\") {\n      if (sessionLength > 60) {\n        setSessionLength((prevState) => prevState - 60);\n      }\n      if (sessionLength <= 60) {\n        setSessionLength(60);\n      }\n    }\n  };\n\n  const onBreakLengthChange = (e) => {\n    const value = e.target.getAttribute(\"value\");\n    if (value === \"increase\") {\n      if (breakLength < 3600) {\n        setBreakLength((prevState) => prevState + 60);\n      }\n      if (breakLength >= 3600) {\n        setBreakLength(3600);\n      }\n    }\n    if (value === \"decrease\") {\n      if (breakLength > 60) {\n        setBreakLength((prevState) => prevState - 60);\n      }\n      if (breakLength <= 60) setBreakLength(60);\n    }\n  };\n\n  const resetApp = () => {\n    setSessionLength(1500);\n    setBreakLength(300);\n  };\n\n  return (\n    <div className=\"App\">\n      <Session\n        sessionLength={sessionLength}\n        onSessionLengthChange={onSessionLengthChange}\n      />\n      <Break\n        breakLength={breakLength}\n        onBreakLengthChange={onBreakLengthChange}\n      />\n      <Timer\n        sessionLength={sessionLength}\n        breakLength={breakLength}\n        resetApp={resetApp}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}